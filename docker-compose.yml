# ==============================================================================
# Docker Compose pour Agentic Forge - Solution Complète
# ==============================================================================

services:
  # ----------------------------------------------------------------------------
  # Service 1: Proxy de Socket Docker (TOUTES LES PERMISSIONS)
  # ----------------------------------------------------------------------------
  docker-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: agentic_forge_docker_proxy
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      # ✅ PERMISSIONS COMPLÈTES POUR AGENTIC FORGE
      - CONTAINERS=1       # Gestion des conteneurs
      - IMAGES=1           # Gestion des images
      - NETWORKS=1         # Gestion des réseaux
      - VOLUMES=1          # Gestion des volumes
      - SERVICES=1         # Gestion des services
      - SWARM=1            # Support Swarm
      - SYSTEM=1           # Informations système
      - EVENTS=1           # Événements Docker
      - PING=1             # Health checks
      - INFO=1             # Informations Docker
      - VERSION=1          # Version Docker
      - BUILD=1            # Construction d'images
      - COMMIT=1           # Commits de conteneurs
      - CREATE=1           # ✅ CRÉATION DE CONTENEURS
      - START=1            # ✅ DÉMARRAGE
      - STOP=1             # ✅ ARRÊT
      - RESTART=1          # ✅ REDÉMARRAGE
      - KILL=1             # ✅ KILL
      - REMOVE=1           # ✅ SUPPRESSION
      - EXEC=1             # ✅ EXÉCUTION DANS CONTENEURS
      - RENAME=1           # Renommage
      - PAUSE=1            # Pause/Unpause
      - WAIT=1             # Attente
      - LOGS=1             # Lecture des logs
      - STATS=1            # Statistiques
      - UPDATE=1           # Mise à jour
      - ATTACH=1           # Attachement
      - COPY=1             # Copie de fichiers
      - ARCHIVE=1          # Archives
      - DIFF=1             # Différences
      - EXPORT=1           # Export
      - IMPORT=1           # Import
      - LOAD=1             # Chargement d'images
      - SAVE=1             # Sauvegarde d'images
      - TAG=1              # Tags d'images
      - PUSH=1             # Push d'images
      - PULL=1             # ✅ PULL D'IMAGES
    networks:
      - agentic_network

  # ----------------------------------------------------------------------------
  # Service 2: Redis
  # ----------------------------------------------------------------------------
  redis:
    image: redis:7.2-alpine
    container_name: agentic_forge_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --port 6378
    ports:
      - "${REDIS_HOST_PORT:-6378}:6378"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "-p", "6378", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - agentic_network

  # ----------------------------------------------------------------------------
  # Service 3: Serveur Principal
  # ----------------------------------------------------------------------------
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic_forge_server
    restart: unless-stopped
    ports:
      - "${HOST_PORT:-8080}:8080"
    volumes:
      - .:/usr/src/app
      - ./workspace:/usr/src/app/workspace
    depends_on:
      redis:
        condition: service_healthy
      docker-proxy:
        condition: service_started
    env_file: .env
    environment:
      - NODE_ENV=development  # ✅ Changé en development pour plus de logs
      - REDIS_HOST=redis
      - REDIS_PORT=6378
      - DOCKER_HOST=tcp://docker-proxy:2375
    command: pnpm run start
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - agentic_network

  # ----------------------------------------------------------------------------
  # Service 4: Interface Web
  # ----------------------------------------------------------------------------
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic_forge_web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ./public:/usr/src/app/public
    depends_on:
      - server
    env_file: .env
    environment:
      - NODE_ENV=development  # ✅ Development mode
      - WEB_PORT=3000
      - MCP_SERVER_URL=http://server:8080
    command: pnpm run start:web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - agentic_network

  # ----------------------------------------------------------------------------
  # Service 5: Worker
  # ----------------------------------------------------------------------------
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic_forge_worker
    restart: unless-stopped
    volumes:
      - .:/usr/src/app
      - ./workspace:/usr/src/app/workspace
    depends_on:
      redis:
        condition: service_healthy
      docker-proxy:
        condition: service_started
    env_file: .env
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6378
      - DOCKER_HOST=tcp://docker-proxy:2375
    command: pnpm run start:worker
    networks:
      - agentic_network

# ==============================================================================
# Volumes & Réseaux
# ==============================================================================
volumes:
  redis_data:
    driver: local

networks:
  agentic_network:
    driver: bridge
    name: agentic_forge_network