version: '3.8'

services:
  # Base de données Redis
  redis:
    image: redis:7.2-alpine
    container_name: agentic_prometheus_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --port 6378
    ports:
      - "${REDIS_HOST_PORT:-6378}:6378"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "-p", "6378", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - agentic_network

  # Serveur MCP principal
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic_prometheus_server
    ports:
      - "${HOST_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./workspace:/usr/src/app/workspace
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6378
      - DOCKER=true
    restart: unless-stopped
    command: pnpm run start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - agentic_network

  # Serveur Web Interface avec dépendance corrigée
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic_prometheus_web
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      server:
        condition: service_healthy  # Attendre que le serveur soit healthy
    env_file: .env
    environment:
      - NODE_ENV=production
      - WEB_PORT=3000
      - MCP_SERVER_URL=http://server:8080
    restart: unless-stopped
    command: pnpm run start:web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/web-health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s  # Plus de temps pour démarrer après le serveur
    networks:
      - agentic_network

  # Worker pour les tâches asynchrones
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic_prometheus_worker
    command: pnpm run start:worker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./workspace:/usr/src/app/workspace
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6378
      - DOCKER=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "worker.js", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - agentic_network

volumes:
  redis_data:
    driver: local

networks:
  agentic_network:
    driver: bridge
    name: agentic_prometheus_network